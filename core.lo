(define l (lambda (path) (load_file path)))

(define && (lambda (a b) (and a b)))
(define || (lambda (a b) (or a b)))
(define ! (lambda (x) (not x)))

(define cons (lambda (a b) (lambda (f) (f a b))))
(define car  (lambda (o1) (o1 (lambda (x y) x))))
(define cdr  (lambda (o2) (o2 (lambda (j i) i))))
(define cadr (lambda (x) (car (cdr x))))

(define new-line (lambda () (print "")))

(define test-loop (lambda () (do (print "got here ok") (sleep 2))))
(define repeat (lambda (n lst) (if (= n 1) lst (append lst (repeat (- n 1) lst)))))
(define loop (lambda (n f) (if (= n 0) nil (cons (f) (loop (- n 1) f)))))

(define get-time (lambda (milliseconds)
   (/ (get-time-microseconds) 1000)))

(define range (lambda (start end)
   (if (> start end)
      nil
      (cons start (range (+ start 1) end)))))

(define list-ref
   (lambda (items n)
      (if (= n 0)
         (car items)
         (if (null? items)
            nil
            (list-ref (cdr items) (- n 1))))))

(define apply (lambda (f lst) (do
   (define len (length lst))
   (if (= len 0)
      (f)
      (if (= len 1)
         (f (car lst))
         (if (= len 2)
            (f (car lst) (cadr lst))
            (if (= len 3)
               (f (car lst) (cadr lst) (list-ref lst 2))
               (print (+ "can't apply function to " (length lst) " arguments")))))))))

(define print-lst (lambda (lst)
   (if (null? lst)
      (print "nil")
      (do (print (car lst))
          (print-lst (cdr lst))))))

(define modify-lst (lambda (lst n new_val)
   (if (= n 0)
      (cons new_val (cdr lst))
      (cons (car lst) (modify-lst (cdr lst) (- n 1) new_val)))))

;(define lst (cons 1 (cons 2 (cons 3 nil))))
;(print-lst lst)
;(define lst2 (modify-lst lst 1 10))
;(print-lst lst2)


(define length
   (do
      (define iter
         (lambda (lst count)
            (if (null? lst)
               count
               (iter (cdr lst) (+ count 1)))))
      (lambda (lst)
         (iter lst 0))))

(define append
   (lambda (lst1 lst2)
      (if (null? lst1)
         lst2
         (cons (car lst1) (append (cdr lst1) lst2)))))

(define map
   (lambda (f lst)
      (if (null? lst)
         nil
         (cons (f (car lst)) (map f (cdr lst))))))

(define filter
   (lambda (f lst)
      (if (null? lst)
         nil
         (if (f (car lst))
            (cons (car lst) (filter f (cdr lst)))
            (filter f (cdr lst))))))

(define fold
   (lambda (combine init lst)
         (if (null? (car lst))
            init
            (fold combine (combine (car lst) init) (cdr lst)))))

