
(define cons(lambda (a b) (lambda (f) (f a b))))
(define car  (lambda (o1) (o1 (lambda (x y) x))))
(define cdr  (lambda (o2) (o2 (lambda (j i) i))))
(define cadr (lambda (x) (car (cdr x))))

(define map
   (lambda (f lst)
      (if (null? lst)
         nil
         (cons (f (car lst)) (map f (cdr lst))))))

;(define map (lambda (f lst) (if (null? lst) nil (cons (f (car lst)) (map f (cdr lst))))))

(define filter
   (lambda (f lst)
      (if (null? lst)
         nil
         (if (f (car lst))
            (cons (car lst) (filter f (cdr lst)))
            (filter f (cdr lst))))))

(define fold
   (lambda (combine init lst)
         (if (null? (car lst))
            init
            (fold f (combine (car lst) init) (cdr lst)))))


;(define fold
;   (lambda (combine init lst)
;      (let ((first (car lst)))
;         (if (null? first)
;            init
;            (fold f (combine first init) (cdr lst))))))

